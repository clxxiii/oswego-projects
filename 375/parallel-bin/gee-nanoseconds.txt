# WARNING: JMH lock is ignored by user request, make sure no other JMH instances are running
# Detecting actual CPU count: 128 detected
# JMH version: 1.37
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djmh.ignoreLock=true
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.oswego.BenchmarkRunner.hwlrBlocking

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns

# Run progress: 12.50% complete, ETA 00:11:43
# Fork: 2 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns


Result "edu.oswego.BenchmarkRunner.hwlrBlocking":
  ≈ 10⁻⁴ ops/ns


# JMH version: 1.37
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djmh.ignoreLock=true
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.oswego.BenchmarkRunner.hwlrNonBlocking

# Run progress: 25.00% complete, ETA 00:10:02
# Fork: 1 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns

# Run progress: 37.50% complete, ETA 00:08:22
# Fork: 2 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns


Result "edu.oswego.BenchmarkRunner.hwlrNonBlocking":
  ≈ 10⁻⁴ ops/ns


# JMH version: 1.37
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djmh.ignoreLock=true
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.oswego.BenchmarkRunner.lrhwBlocking

# Run progress: 50.00% complete, ETA 00:06:42
# Fork: 1 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns

# Run progress: 62.50% complete, ETA 00:05:01
# Fork: 2 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns


Result "edu.oswego.BenchmarkRunner.lrhwBlocking":
  ≈ 10⁻⁴ ops/ns


# JMH version: 1.37
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djmh.ignoreLock=true
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: edu.oswego.BenchmarkRunner.lrhwNonBlocking

# Run progress: 75.00% complete, ETA 00:03:21
# Fork: 1 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns

# Run progress: 87.50% complete, ETA 00:01:40
# Fork: 2 of 2
# Warmup Iteration   1: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   2: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   3: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   4: ≈ 10⁻⁴ ops/ns
# Warmup Iteration   5: ≈ 10⁻⁴ ops/ns
Iteration   1: ≈ 10⁻⁴ ops/ns
Iteration   2: ≈ 10⁻⁴ ops/ns
Iteration   3: ≈ 10⁻⁴ ops/ns
Iteration   4: ≈ 10⁻⁴ ops/ns
Iteration   5: ≈ 10⁻⁴ ops/ns


Result "edu.oswego.BenchmarkRunner.lrhwNonBlocking":
  ≈ 10⁻⁴ ops/ns


# Run complete. Total time: 00:13:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt   Score    Error   Units
BenchmarkRunner.hwlrBlocking     thrpt   10  ≈ 10⁻⁴           ops/ns
BenchmarkRunner.hwlrNonBlocking  thrpt   10  ≈ 10⁻⁴           ops/ns
BenchmarkRunner.lrhwBlocking     thrpt   10  ≈ 10⁻⁴           ops/ns
BenchmarkRunner.lrhwNonBlocking  thrpt   10  ≈ 10⁻⁴           ops/ns
